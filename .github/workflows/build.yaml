name: Build
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches: [ master, protected/* ]

jobs:
  # This job runs multiple smaller checks where having several jobs would be overkill.
  misc_sanity_checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Validate JSON files
      run: |
        python3 utils/validate_json.py data/txts/
        python3 utils/update_authors.py
    - name: Check for missing copyright headers
      run: |
        pushd src
        ../utils/find_missing_copyright_headers.sh
        popd
    - name: Check for superfluous includes and forward declarations
      run: |
        pushd src
        ../utils/find_unused_includes.py
        popd

  codecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
    - name: Test
      run: |
        ./cmake/codecheck/run_tests.py
    - name: Check
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="Debug"
        TERM=dumb make -j1 codecheck 2>&1 | tee codecheck.out
    - name: Report
      run: |
        if grep '^[/_.a-zA-Z]\+:[0-9]\+:' build/codecheck.out; then
          echo "You have codecheck warnings (see above). Please fix."
          exit 1
        else
          echo "Codecheck is clear :)"
          exit 0
        fi

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Generate documentation
      run: |
        cd doc/sphinx
        pip install -r requirements.txt
        mkdir source/_static
        ./extract_rst.py
        sphinx-build -W -b json -d build/doctrees source build/json

  clang_tidy:
    runs-on: ubuntu-latest
    env:
      CC:  /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
    - name: CMake
      run: |
        # Prepare build dir
        echo "Will use $(nproc) cores."
        mkdir build
        pushd build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        popd
    - name: Restore cache
      uses: actions/cache/restore@v3
      with:
        path: build/clang-tidy-cache
        key: clang-tidy-cache-${{ github.sha }}
        restore-keys: |
          clang-tidy-cache-
    - name: Check
      # To run a single check, call:
      # python3 ../utils/run-clang-tidy.py -checks=-*,my-check-prefix* | tee ../clang-tidy.log
      run: |
        # run-clang-tidy.py
        pushd build
        python3 ../utils/run-clang-tidy.py -cache | tee ../clang-tidy.log
        popd
    - name: Save cache
      # We want to save the cache even if the report fails because of failed files
      uses: actions/cache/save@v3
      with:
        path: build/clang-tidy-cache
        key: clang-tidy-cache-${{ github.sha }}
    - name: Report
      run: utils/check_clang_tidy_results.py clang-tidy.log

  lua_style:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Prepare documentation examples for parsing
      run: |
        pushd doc/sphinx
        ./extract_rst.py
        popd
    - name: Run Lua style checker
      run: ./utils/lua_style_checker.py

  testsuite:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      fail-fast: false
      matrix:
        # We test the two newest and the two oldest versions of each of the two compilers
        config: [Debug, Release]
        os: [ubuntu-22.04]
        compiler: [clang-15, clang-14, g++-12, g++-11]
        include:
          # Some compilers need an older ubuntu version to run correctly
          - compiler: g++-7
            os: ubuntu-20.04
            config: Debug
          - compiler: g++-7
            os: ubuntu-20.04
            config: Release
          - compiler: g++-8
            os: ubuntu-20.04
            config: Debug
          - compiler: g++-8
            os: ubuntu-20.04
            config: Release
          - compiler: clang-8
            os: ubuntu-20.04
            config: Debug
          - compiler: clang-8
            os: ubuntu-20.04
            config: Release
          - compiler: clang-7
            os: ubuntu-20.04
            config: Debug
          - compiler: clang-7
            os: ubuntu-20.04
            config: Release
    runs-on: ${{ matrix.os }}
    env:
      SDL_VIDEODRIVER: 'x11'
      DISPLAY: ':99.0'
      # TODO: Under Xvfb, the usual X11 memory leaks show up as an unsymbolized
      # <unknown module> making them impossible to suppress. So we disable all
      # memory leaks checking in the testsuite for now.
      ASAN_OPTIONS: 'detect_leaks=0'
      LSAN_OPTIONS: 'suppressions=${{ github.workspace }}/asan_3rd_party_leaks'
      CXX: '${{ matrix.compiler }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
    - name: Compile
      run: |
        if [ "${CXX:0:1}" == "c" ]
        then
          export CC="/usr/bin/${{ matrix.compiler }}"  # clang-10
          export CXX="${CC/clang/clang++}"             # clang++-10
        else
          export CXX="/usr/bin/${{ matrix.compiler }}" # g++-10
          export CC="${CXX/g++/gcc}"                   # gcc-10
        fi
        mkdir build
        pushd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="${{ matrix.config }}" -DOPTION_BUILD_TRANSLATIONS="ON" -DOPTION_BUILD_WEBSITE_TOOLS="ON" -DOPTION_ASAN="ON" -DOPTION_BUILD_CODECHECK="OFF"
        make -k -j$(nproc) VERBOSE=1
    - name: Make install/uninstall
      run: |
        cd build
        TEST_INSTALL_DIR="${PWD}/test_install"
        make -j$(nproc) DESTDIR=${TEST_INSTALL_DIR} install
        make -j$(nproc) DESTDIR=${TEST_INSTALL_DIR} uninstall
        test ! -d ${TEST_INSTALL_DIR}
    - name: Website Binaries
      run: |
        /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 800x600x24 -ac +extension GLX
        sleep 1m
        # Ignore transient SDL errors (exit code 2)
        mkdir temp_web
        build/src/website/wl_map_object_info temp_web || [ $? -eq 2 ]
        build/src/website/wl_map_info data/maps/Archipelago_Sea.wmf || [ $? -eq 2 ]
    - name: Testsuite
      run: |
        # regression_test.py
        TIMEOUT=""
        if [ "${{ matrix.config }}" = "Debug" ]
        then
          TIMEOUT="-t 20"
        fi
        ./regression_test.py -b build/src/widelands $TIMEOUT

  windows-msvc:
    # inspired by https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config: [Debug, Release]
        arch: [x64, x86]
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MSVC)
    runs-on: windows-2022
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_TARGET_TRIPLET: ${{ matrix.arch }}-windows-static

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Checkout vcpkg
      id: prepare
      run: |
        REF=$(cat .github/scripts/vcpkg_ref)
        cd ${{ env.VCPKG_ROOT }}
        # REF can be empty, a commit hash or a pull request
        [ -n "$REF" ] && git fetch
        git checkout $REF || git pull origin $REF
        echo "vcpkg_key=${{ hashFiles( './install-dependencies.sh' ) }}-${REF}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_ROOT }}/installed
        key: |
          ${{ steps.prepare.outputs.vcpkg_key }}-${{ matrix.arch }}
    - name: Installing dependencies
      run: |
        choco install innosetup
        # Cache should have been populated by vcpkg-packages job
        ./install-dependencies.sh vcpkg --triplet=${{ env.VCPKG_TARGET_TRIPLET }}
      shell: bash
    - name: Configure MSVC development console
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        # Check https://github.com/actions/runner-images/blob/main/images/win/toolsets/toolset-2022.json for installed versions
        toolset: 14.36
    - name: Compiler
      env:
        VCPKG_ROOT: C:\vcpkg
      run: |
        mkdir $env:GITHUB_WORKSPACE\build
        cd $env:GITHUB_WORKSPACE\build
        cmake.exe -G "NMake Makefiles" .. -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }} -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DOPTION_BUILD_WEBSITE_TOOLS=OFF -DOPTION_BUILD_TRANSLATIONS=ON -DOPTION_BUILD_TESTS=ON -DOPTION_ASAN=OFF -DOPTION_BUILD_CODECHECK=OFF -DOPTION_BUILD_WINSTATIC=ON -DOPTION_USE_GLBINDING=ON -DOPTION_FORCE_EMBEDDED_MINIZIP=ON
        nmake
        if ("${{ matrix.config }}" -Match "Release") {
          strip -sv ./src/widelands.exe
        }
    - name: InnoSetup
      run: |
        cd $env:GITHUB_WORKSPACE
        # Environment variables needed by our InnoSetup script
        $env:PLATFORM = "${{ matrix.arch }}"
        $env:CONFIGURATION = "${{ matrix.config }}"
        $env:APPVEYOR_BUILD_FOLDER = $env:GITHUB_WORKSPACE
        $env:APPVEYOR_BUILD_VERSION = "Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.arch }}"
        ISCC.exe /o$env:GITHUB_WORKSPACE /fWidelands-${{ github.sha }}-msvc-${{ matrix.config }}-${{ matrix.arch }} $env:GITHUB_WORKSPACE\utils\win32\innosetup\Widelands.iss
    - name: Uploading installer
      uses: actions/upload-artifact@v3
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MSVC)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-msvc-${{ matrix.config }}-${{ matrix.arch }}.exe

  windows:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config: [Debug, Release]
        arch: [x64, x86]
        include:
          - arch: x64
            bits: 64
          - arch: x86
            bits: 32
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MinGW)
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: |
        $env:Path = "C:\msys64\usr\bin;$env:Path"
        pacman.exe --noconfirm -Syyuu --ignore ca-certificates
        pacman.exe --noconfirm -Syyuu --ignore ca-certificates
        bash.exe -c "./install-dependencies.sh msys${{ matrix.bits }} --noconfirm"
        # pacman.exe --noconfirm -U https://repo.msys2.org/mingw/$env:archname/mingw-w64-$env:archname-libtiff-4.3.0-3-any.pkg.tar.zst
        choco install innosetup
    - name: Compiler
      run: |
        $env:Path = "C:/msys64/mingw${{ matrix.bits }}/include;C:/msys64/mingw${{ matrix.bits }}/lib;C:/msys64/mingw${{ matrix.bits }}/bin;C:/msys64/usr/bin;$env:Path"
        $env:CC = "C:/msys64/mingw${{ matrix.bits }}/bin/gcc.exe"
        $env:CXX = "C:/msys64/mingw${{ matrix.bits }}/bin/g++.exe"
        mkdir $env:GITHUB_WORKSPACE\build
        cd $env:GITHUB_WORKSPACE\build
        cmake.exe -G Ninja .. -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DOPTION_BUILD_WEBSITE_TOOLS=OFF -DOPTION_BUILD_TRANSLATIONS=ON -DOPTION_BUILD_TESTS=ON -DOPTION_ASAN=OFF -DUSE_XDG=OFF -DOPTION_BUILD_CODECHECK=OFF -DUSE_FLTO_IF_AVAILABLE=OFF -DCMAKE_JOB_POOLS="linking=1" -DCMAKE_JOB_POOL_LINK=linking -DOPTION_BUILD_WINSTATIC=ON -DOPTION_FORCE_EMBEDDED_MINIZIP=ON
        cmake.exe --build .
        strip -sv ./src/widelands.exe
    - name: InnoSetup
      run: |
        cd $env:GITHUB_WORKSPACE
        # Environment variables needed by our InnoSetup script
        $env:PLATFORM = "${{ matrix.arch }}"
        $env:MINGWPATH = "C:\msys64\mingw${{ matrix.bits }}\bin"
        $env:CONFIGURATION = "${{ matrix.config }}"
        $env:APPVEYOR_BUILD_FOLDER = $env:GITHUB_WORKSPACE
        $env:APPVEYOR_BUILD_VERSION = "Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.arch }}"
        strip.exe -sv .\build\src\widelands.exe
        ISCC.exe /o$env:GITHUB_WORKSPACE /fWidelands-${{ github.sha }}-mingw-${{ matrix.config }}-${{ matrix.arch }} $env:GITHUB_WORKSPACE\utils\win32\innosetup\Widelands.iss
    - name: Uploading installer
      uses: actions/upload-artifact@v3
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MinGW)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-mingw-${{ matrix.config }}-${{ matrix.arch }}.exe

  macos:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config: [debug, release]
        compiler: [clang]
    name: MacOS ${{ matrix.config }} ${{ matrix.compiler }}
    runs-on: macos-11
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: |
        export ICU_ROOT="$(brew --prefix icu4c)" && \
        export PATH="/usr/local/opt/ccache/libexec:/usr/local/opt/gettext/bin:$PATH";
        ./install-dependencies.sh homebrew ccache dylibbundler
    - name: Building
      run: |
        mkdir build_wl
        cd build_wl/
        ../utils/macos/build_app.sh "--${{ matrix.config }}" "--${{ matrix.compiler }}"
        DMGPATH="$(pwd)"
        DMGFILE="$(ls *.dmg)"
        echo "DMG file is: $DMGPATH/$DMGFILE"
        mv "$DMGFILE" "${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg"
        #echo "::set-env name=dmg::$DMGPATH/$DMGFILE"

    - name: Uploading DMG
      uses: actions/upload-artifact@v3
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.compiler }} MacOS 11 AppImage
        path: ${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg

  appimage:
    if: ${{ github.repository == 'widelands/widelands' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/protected/navalwarfare') }}
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [clang-10]
    # Must run on the oldest still-supported Ubuntu LTS release
    runs-on: ubuntu-20.04
    env:
      VERSION: "${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}"
      CXX: '${{ matrix.compiler }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
    - name: Compile
      run: |
        if [ "${CXX:0:1}" == "c" ]
        then
          export CC="/usr/bin/${{ matrix.compiler }}"  # clang-10
          export CXX="${CC/clang/clang++}"             # clang++-10
        else
          export CXX="/usr/bin/${{ matrix.compiler }}" # g++-10
          export CC="${CXX/g++/gcc}"                   # gcc-10
        fi
        mkdir build
        pushd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="${{ matrix.config }}" -DOPTION_BUILD_WEBSITE_TOOLS="OFF" -DOPTION_BUILD_TESTS="OFF" -DOPTION_BUILD_CODECHECK="OFF" -DCMAKE_INSTALL_PREFIX=/usr/bin -DWL_INSTALL_BASEDIR=/usr/share/widelands -DWL_INSTALL_BINDIR=/usr/bin -DWL_INSTALL_DATADIR=../share/widelands
        make -k -j$(nproc) install DESTDIR=../AppDir
        popd
        mv AppDir/usr/bin/share/* AppDir/usr/share
        rmdir AppDir/usr/bin/share
    - name: Build AppImage
      run: |
        wget -nv -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        ./linuxdeploy-x86_64.AppImage --executable AppDir/usr/bin/widelands --desktop-file xdg/org.widelands.Widelands.desktop --appdir AppDir --output appimage
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.compiler }} Linux AppImage
        path: ${{ github.workspace }}/Widelands-${{ env.VERSION }}-x86_64.AppImage

  dev_release:
    name: Automated development pre-release
    if: ${{ github.repository == 'widelands/widelands' && github.ref == 'refs/heads/master' && always() }}
    needs: [windows, windows-msvc, macos, appimage]
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 15
          token: '${{ secrets.WIDELANDS_FORMAT_TOKEN }}'
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Check missing artifacts
        # This step ensures that the development release always contains an artifact for every platform.
        # artifacts.list lists all attachments of the pre-release. In case a build step failed, we detect
        # that a file is missing and download the last successful build from the pre-release.
        run: |
          RELEASE_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/latest"
          mkdir Widelands-latest
          cd Widelands-latest
          curl -L -O "$RELEASE_URL/artifacts.list"
          for ARTIFACT in $(cat artifacts.list)
          do
            [ "${ARTIFACT%%-*}" != "Widelands" ] && continue
            MATRIX=$(echo $ARTIFACT | sed 's/Widelands-[0-9a-f]*-//' -)
            ls ../Widelands*/Widelands*${MATRIX} || \
              curl -L -o $ARTIFACT "$RELEASE_URL/Widelands-daily-${MATRIX}"
          done
      - name: List and rename artifacts
        run: |
          sudo apt-get update
          sudo apt-get install rename
          find . -name 'Widelands-*' -type f -print0 | while IFS= read -d '' -r ARTIFACT; do
            FILENAME=$(basename "$ARTIFACT")
            # Move all artifacts to the current folder
            mv "$ARTIFACT" "$FILENAME"
            # Store original file names
            echo $FILENAME | tee -a artifacts.list
            # Rename artifacts to have a fixed url
            prename 's/Widelands-[0-9a-f]*-/Widelands-daily-/' "$FILENAME" \;
          done
          # Calculate checksums
          find . -name 'Widelands-daily-*' -type f -print0 | while IFS= read -d '' -r ARTIFACT; do
            echo "Calculate checksum for \"$ARTIFACT\""
            md5sum "${ARTIFACT}" > "${ARTIFACT}.md5"
          done
          # curl exits 23 because grep will kill it after the first match
          set +e
          latest=$(curl -i "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/master" | grep -m 1 "\"sha\": ")
          set -e
          latest=${latest#*: \"}
          latest=${latest%\",}
          if [ "$latest" != "$GITHUB_SHA" ]
          then
            echo "The master branch ($GITHUB_REF) was updated from '$GITHUB_SHA' to '$latest', cancel"
            exit 1
          fi
      - name: Updating latest pre-release
        # Creates a new pre-release with the "latest" tag and all gathered artifacts.
        # Because all older artifacts are removed, we have to reupload the missing ones detected in the previous step
        env:
          GH_TOKEN: "${{ secrets.WIDELANDS_FORMAT_TOKEN }}"
        run: |
          gh release delete latest --yes    || echo "No old release to delete"
          git push --delete origin latest   || echo "No latest tag to delete"
          git tag --force latest HEAD
          git push --tags origin

          echo "These builds are automatically generated from master. " >> release_notes
          echo "## Latest changes" >> release_notes
          # Print changelog from last 10 commits
          git log --pretty="- %h: %s (%an)" --no-decorate HEAD~10..HEAD >> release_notes
          echo "<details><summary>Original filenames</summary><pre>" >> release_notes
          cat artifacts.list >> release_notes
          echo "</pre></details>" >> release_notes

          gh release create latest         \
            --prerelease                   \
            --notes-file release_notes     \
            --title "Development Builds"   \
            Widelands-daily-* artifacts.list
