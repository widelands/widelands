name: Build
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches: [ master ]

jobs:
  # This job runs multiple smaller checks where having several jobs would be overkill.
  misc_sanity_checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Validate JSON files
      run: |
        python3 utils/validate_json.py data/txts/
        python3 utils/update_authors.py
    - name: Check for missing copyright headers
      run: |
        pushd src
        ../utils/find_missing_copyright_headers.sh
        popd
    - name: Check for superfluous includes and forward declarations
      run: |
        pushd src
        ../utils/find_unused_includes.py
        popd

  codecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Installing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install cmake g++ gcc gettext libasio-dev libglew-dev libpng-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev python3 zlib1g-dev -y
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Test
      run: |
        ./cmake/codecheck/run_tests.py
    - name: Check
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="Debug"
        TERM=dumb make -j1 codecheck 2>&1 | tee codecheck.out
    - name: Report
      run: |
        if grep '^[/_.a-zA-Z]\+:[0-9]\+:' build/codecheck.out; then
          echo "You have codecheck warnings (see above). Please fix."
          exit 1
        else
          echo "Codecheck is clear :)"
          exit 0
        fi

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Installing python
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    - name: Generate documentation
      run: |
        pip install sphinx
        cd doc/sphinx
        mkdir source/_static
        ./extract_rst.py
        sphinx-build -W -b json -d build/doctrees source build/json

  clang_tidy:
    runs-on: ubuntu-latest
    steps:
    - name: Installing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install git cmake g++ gcc gettext libasio-dev libglew-dev libpng-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev python3 zlib1g-dev clang-tidy python-yaml -y
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Check
      # To run a single check, call:
      # python3 ../utils/run-clang-tidy.py -checks=-*,my-check-prefix* > ../clang-tidy.log

      run: |
        export CC=/usr/bin/clang
        export CXX=/usr/bin/clang++
        mkdir build
        pushd build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        python3 ../utils/run-clang-tidy.py -checks=*,-android*,-fuchsia* | tee ../clang-tidy.log
        popd
    - name: Report
      run: utils/check_clang_tidy_results.py clang-tidy.log

  lua_style:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Prepare documentation examples for parsing
      run: |
        pushd doc/sphinx
        ./extract_rst.py
        popd
    - name: Run Lua style checker
      run: ./utils/lua_style_checker.py

  testsuite:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      fail-fast: false
      matrix:
        config:
          - Release
          - Debug
        os:
          - ubuntu-20.04
        compiler:
          # We test the two newest and the two oldest versions of each of the two compilers
          - clang-12
          - clang-11
          - clang-7
          - clang-6.0
          - g++-11
          - g++-10
        include:
          # Some compilers need an older ubuntu version to run correctly
          - compiler: g++-5
            os: ubuntu-18.04
            config: Debug
          - compiler: g++-5
            os: ubuntu-18.04
            config: Release
          - compiler: g++-6
            os: ubuntu-18.04
            config: Debug
          - compiler: g++-6
            os: ubuntu-18.04
            config: Release
    runs-on: ${{ matrix.os }}
    env:
      SDL_VIDEODRIVER: 'x11'
      DISPLAY: ':99.0'
      # TODO: Under Xvfb, the usual X11 memory leaks show up as an unsymbolized
      # <unknown module> making them impossible to suppress. So we disable all
      # memory leaks checking in the testsuite for now.
      ASAN_OPTIONS: 'detect_leaks=0'
      LSAN_OPTIONS: 'suppressions=${{ github.workspace }}/asan_3rd_party_leaks'
    steps:
    - name: Installing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install git cmake ${{ matrix.compiler }} gettext libasio-dev libglew-dev libpng-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev python3 zlib1g-dev mesa-utils linux-generic xserver-xorg-core xserver-xorg xserver-xorg-video-all xserver-xorg-input-all libwayland-egl1-mesa -y
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Compile
      run: |
        CXX="${{ matrix.compiler }}"
        if [ "${CXX:0:1}" == "c" ]
        then
          export CC="/usr/bin/${{ matrix.compiler }}"  # clang-10
          export CXX="${CC/clang/clang++}"             # clang++-10
        else
          export CXX="/usr/bin/${{ matrix.compiler }}" # g++-10
          export CC="${CXX/g++/gcc}"                   # gcc-10
        fi
        mkdir build
        pushd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="${{ matrix.config }}" -DOPTION_BUILD_TRANSLATIONS="ON" -DOPTION_BUILD_WEBSITE_TOOLS="ON" -DOPTION_ASAN="ON" -DOPTION_BUILD_CODECHECK="OFF"
        make -k -j$(nproc)
        cd ..
    - name: Website Binaries
      run: |
        /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 800x600x24 -ac +extension GLX
        sleep 1m
        # Ignore transient SDL errors (exit code 2)
        mkdir temp_web
        build/src/website/wl_map_object_info temp_web || [ $? -eq 2 ]
        build/src/website/wl_map_info data/maps/Archipelago_Sea.wmf || [ $? -eq 2 ]
    - name: Testsuite
      run: ./regression_test.py -b build/src/widelands

  windows-msvc:
    # inspired by https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config:
          - Release
          - Debug
        arch:
          - x64
          - x86
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MSVC)
    runs-on: windows-2022
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_TARGET_TRIPLET: ${{ matrix.arch }}-windows-static

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Create cache directory"
      id: prepare
      run: |
        mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        cd ${{ env.VCPKG_ROOT }}
        echo "::set-output name=head::$(git rev-parse --short HEAD)"
      shell: bash
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: |
          ${{ hashFiles( '.github/workflows/build.yaml' ) }}-${{ steps.prepare.outputs.head }}-${{ matrix.arch }}
    - name: Installing dependencies
      run: |
        choco install innosetup
        vcpkg install --disable-metrics --triplet=${{ env.VCPKG_TARGET_TRIPLET }} asio gettext libpng icu glbinding sdl2 sdl2-ttf sdl2-mixer[libvorbis,libflac,mpg123] sdl2-image[libjpeg-turbo,tiff] graphite2 harfbuzz opusfile libwebp
    - name: Configure MSVC development console
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
    - name: Compiler
      run: |
        mkdir $env:GITHUB_WORKSPACE\build
        cd $env:GITHUB_WORKSPACE\build
        cmake.exe -G "NMake Makefiles" .. -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }} -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DOPTION_BUILD_WEBSITE_TOOLS=OFF -DOPTION_BUILD_TRANSLATIONS=ON -DOPTION_BUILD_TESTS=ON -DOPTION_ASAN=OFF -DOPTION_BUILD_CODECHECK=OFF -DOPTION_BUILD_WINSTATIC=ON -DOPTION_USE_GLBINDING=ON
        nmake
        if ("${{ matrix.config }}" -Match "Release") {
          strip -sv ./src/widelands.exe
        } 
    - name: InnoSetup
      run: |
        cd $env:GITHUB_WORKSPACE
        # Environment variables needed by our InnoSetup script
        $env:PLATFORM = "${{ matrix.arch }}"
        $env:CONFIGURATION = "${{ matrix.config }}"
        $env:APPVEYOR_BUILD_FOLDER = $env:GITHUB_WORKSPACE
        $env:APPVEYOR_BUILD_VERSION = "Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.arch }}"
        ISCC.exe /o$env:GITHUB_WORKSPACE /fWidelands-${{ github.sha }}-msvc-${{ matrix.config }}-${{ matrix.arch }} $env:GITHUB_WORKSPACE\utils\win32\innosetup\Widelands.iss
    - name: Uploading installer
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MSVC)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-msvc-${{ matrix.config }}-${{ matrix.arch }}.exe

  windows:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config:
          - Release
          - Debug
        arch:
          - x64
          - x86
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MinGW)
    runs-on: windows-2022
    steps:
    - name: Installing dependencies
      run: |
        $env:Path += ";C:\msys64\usr\bin"
        pacman.exe --noconfirm -Syyuu --ignore ca-certificates
        pacman.exe --noconfirm -Syyuu --ignore ca-certificates
        if ("${{ matrix.arch }}" -Match "x64") {
          $env:archname = "x86_64"
        } else {
          $env:archname = "i686"
        }
        pacman.exe --noconfirm -S mingw-w64-$env:archname-gcc mingw-w64-$env:archname-ninja mingw-w64-$env:archname-SDL2_ttf mingw-w64-$env:archname-SDL2_mixer mingw-w64-$env:archname-SDL2_image mingw-w64-$env:archname-glew mingw-w64-$env:archname-asio mingw-w64-$env:archname-icu
        # pacman.exe --noconfirm -U https://repo.msys2.org/mingw/$env:archname/mingw-w64-$env:archname-libtiff-4.3.0-3-any.pkg.tar.zst
        choco install innosetup
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Compiler
      run: |
        if ("${{ matrix.arch }}" -Match "x64") {
          $env:bits = "64"
        } else {
          $env:bits = "32"
        }
        $env:Path = "C:/msys64/mingw$env:bits/include;C:/msys64/mingw$env:bits/lib;C:/msys64/mingw$env:bits/bin;C:/msys64/usr/bin;$env:Path"
        $env:CC = "C:/msys64/mingw$env:bits/bin/gcc.exe"
        $env:CXX = "C:/msys64/mingw$env:bits/bin/g++.exe"
        mkdir $env:GITHUB_WORKSPACE\build
        cd $env:GITHUB_WORKSPACE\build
        cmake.exe -G Ninja .. -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DOPTION_BUILD_WEBSITE_TOOLS=OFF -DOPTION_BUILD_TRANSLATIONS=ON -DOPTION_BUILD_TESTS=ON -DOPTION_ASAN=OFF -DUSE_XDG=OFF -DOPTION_BUILD_CODECHECK=OFF -DUSE_FLTO_IF_AVAILABLE=OFF -DCMAKE_JOB_POOLS="linking=1" -DCMAKE_JOB_POOL_LINK=linking -DOPTION_BUILD_WINSTATIC=ON
        cmake.exe --build .
        strip -sv ./src/widelands.exe
    - name: InnoSetup
      run: |
        cd $env:GITHUB_WORKSPACE
        # Environment variables needed by our InnoSetup script
        if ("${{ matrix.arch }}" -Match "x64") {
          $env:PLATFORM = "x64"
          $env:MINGWPATH = "C:\msys64\mingw64\bin"
        } else {
          $env:PLATFORM = "x86"
          $env:MINGWPATH = "C:\msys64\mingw32\bin"
        }
        $env:CONFIGURATION = "${{ matrix.config }}"
        $env:APPVEYOR_BUILD_FOLDER = $env:GITHUB_WORKSPACE
        $env:APPVEYOR_BUILD_VERSION = "Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.arch }}"
        strip.exe -sv .\build\src\widelands.exe
        ISCC.exe /o$env:GITHUB_WORKSPACE /fWidelands-${{ github.sha }}-mingw-${{ matrix.config }}-${{ matrix.arch }} $env:GITHUB_WORKSPACE\utils\win32\innosetup\Widelands.iss
    - name: Uploading installer
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MinGW)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-mingw-${{ matrix.config }}-${{ matrix.arch }}.exe

  macos:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config:
          - release
          - debug
        compiler:
          - clang
    name: MacOS ${{ matrix.config }} ${{ matrix.compiler }}
    runs-on: macos-11
    steps:
    - name: Installing dependencies
      run: |
        export ICU_ROOT="$(brew --prefix icu4c)" && \
        export PATH="/usr/local/opt/ccache/libexec:/usr/local/opt/gettext/bin:$PATH";
        brew install asio ccache glew ninja sdl2 sdl2_image sdl2_mixer sdl2_ttf dylibbundler
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Building
      run: |
        mkdir build_wl
        cd build_wl/
        ../utils/macos/build_app.sh "--${{ matrix.config }}" "--${{ matrix.compiler }}"
        DMGPATH="$(pwd)"
        DMGFILE="$(ls *.dmg)"
        echo "DMG file is: $DMGPATH/$DMGFILE"
        mv $DMGFILE ${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg
        #echo "::set-env name=dmg::$DMGPATH/$DMGFILE"

    - name: Uploading DMG
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.compiler }} MacOS 11 AppImage
        path: ${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg

  dev_release:
    name: Automated development pre-release
    if: ${{ github.repository == 'widelands/widelands' && github.ref == 'refs/heads/master' && always() }}
    needs: [windows, windows-msvc, macos]
    runs-on: "ubuntu-latest"
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Check missing artifacts
        # This step ensures that the development release always contains an artifact for every platform.
        # artifacts.list lists all attachments of the pre-release. In case a build step failed, we detect
        # that a file is missing and download the last successful build from the pre-release.
        run: |
          RELEASE_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/latest"
          mkdir Widelands-latest
          cd Widelands-latest
          curl -L -O "$RELEASE_URL/artifacts.list"
          for ARTIFACT in $(cat artifacts.list)
          do
            [ "${ARTIFACT%%-*}" != "Widelands" ] && continue
            MATRIX=$(echo $ARTIFACT | sed 's/Widelands-[0-9a-f]*-//' -)
            ls ../Widelands*/Widelands*${MATRIX} || \
              curl -L -o $ARTIFACT "$RELEASE_URL/Widelands-daily-${MATRIX}"
          done
      - name: List and rename artifacts
        run: |
          sudo apt-get update
          sudo apt-get install rename
          find . -name 'Widelands*' -type f -printf '%f\n' | tee artifacts.list
          find . -name 'Widelands*' -type f -exec prename 's/Widelands-[0-9a-f]*-/Widelands-daily-/' "{}" \;
          find . -name 'Widelands*' -type f -print0 | while IFS= read -d '' -r ARTIFACT; do
            dir=$(dirname "$ARTIFACT")
            filename=$(basename "$ARTIFACT")
            echo "Calculate checksum for \"$ARTIFACT\""
            pushd "$dir"
            md5sum "${filename}" > "${filename}.md5"
            popd
          done
          # curl exits 23 because grep will kill it after the first match
          set +e
          latest=$(curl -i "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/master" | grep -m 1 "\"sha\": ")
          set -e
          latest=${latest#*: \"}
          latest=${latest%\",}
          if [ "$latest" != "$GITHUB_SHA" ]
          then
            echo "The master branch ($GITHUB_REF) was updated from '$GITHUB_SHA' to '$latest', cancel"
            exit 1
          fi
      - name: Updating latest pre-release
        # Creates a new pre-release with the "latest" tag and all gathered artifacts.
        # Because all older artifacts are removed, we have to reupload the missing ones detected in the previous step
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.WIDELANDS_FORMAT_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Builds"
          files: |
            */Widelands-daily-*.exe
            */Widelands-daily-*.dmg
            */Widelands-daily-*.md5
            artifacts.list
      - name: Update Release Body
        uses: tubone24/update_release@v1.3.1
        env:
          TAG_NAME: "latest"
          GITHUB_TOKEN: ${{ secrets.WIDELANDS_FORMAT_TOKEN }}
        with:
          is_append_body: true
          body: |
            ---
            These builds are automatically generated from master. Changes since the last build are listed above.
            The file `artifacts.list` lists the original installer names, which also contain the commit hash from which they were generated.

